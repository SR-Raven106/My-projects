{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SR-Raven106/My-projects/blob/main/hackthonaP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "La1mEg1E1cPq"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttNBb0x7iNrL",
        "outputId": "e4a1e126-ec36-497b-d7de-a764dff28092"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial admin account created (for first-time setup only).\n",
            "\n",
            "1. Create User (Admin only)\n",
            "2. Login\n",
            "3. Exit\n"
          ]
        }
      ],
      "source": [
        "from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, UniqueConstraint\n",
        "from sqlalchemy.orm import declarative_base, sessionmaker, relationship\n",
        "from getpass import getpass\n",
        "\n",
        "Base = declarative_base()\n",
        "\n",
        "# User model\n",
        "class User(Base):\n",
        "    __tablename__ = 'users'\n",
        "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
        "    username = Column(String, unique=True, nullable=False)\n",
        "    password = Column(String, nullable=False)  # Plain text for simplicity (hash in production)\n",
        "    role = Column(String, nullable=False)  # 'patient', 'doctor', 'admin'\n",
        "\n",
        "    __table_args__ = (UniqueConstraint('username', 'role', name='_username_role_uc'),)\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f'<User {self.username}, {self.role}>'\n",
        "\n",
        "# Message model\n",
        "class Message(Base):\n",
        "    __tablename__ = 'messages'\n",
        "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
        "    sender_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n",
        "    receiver_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n",
        "    content = Column(Text, nullable=False)\n",
        "\n",
        "    sender = relationship(\"User\", foreign_keys=[sender_id])\n",
        "    receiver = relationship(\"User\", foreign_keys=[receiver_id])\n",
        "\n",
        "# Note model\n",
        "class Note(Base):\n",
        "    __tablename__ = 'notes'\n",
        "    id = Column(Integer, primary_key=True, autoincrement=True)\n",
        "    doctor_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n",
        "    patient_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n",
        "    content = Column(Text, nullable=False)\n",
        "\n",
        "    doctor = relationship(\"User\", foreign_keys=[doctor_id])\n",
        "    patient = relationship(\"User\", foreign_keys=[patient_id])\n",
        "\n",
        "# Database setup\n",
        "engine = create_engine('sqlite:///telehealth_app.db')\n",
        "Base.metadata.create_all(engine)\n",
        "\n",
        "Session = sessionmaker(bind=engine)\n",
        "session = Session()\n",
        "\n",
        "# Function to create user accounts (admin-restricted)\n",
        "def create_user(creator_username, creator_password, new_username, new_password, new_role):\n",
        "    \"\"\"\n",
        "    Allows an admin to create a new user account.\n",
        "    \"\"\"\n",
        "    creator = session.query(User).filter_by(username=creator_username, password=creator_password).first()\n",
        "    if creator and creator.role == 'admin':\n",
        "        if session.query(User).filter_by(username=new_username).first():\n",
        "            print(f\"User with username '{new_username}' already exists.\")\n",
        "            return\n",
        "        new_user = User(username=new_username, password=new_password, role=new_role)\n",
        "        session.add(new_user)\n",
        "        session.commit()\n",
        "        print(f\"Account for '{new_username}' with role '{new_role}' created successfully.\")\n",
        "    else:\n",
        "        print(\"Only admins can create new accounts. Invalid credentials.\")\n",
        "\n",
        "# Function to authenticate users\n",
        "def authenticate_user():\n",
        "    username = input(\"Enter username: \")\n",
        "    password = getpass(\"Enter password: \")\n",
        "\n",
        "    user = session.query(User).filter_by(username=username, password=password).first()\n",
        "    if user:\n",
        "        print(f\"Welcome, {user.username}! You are logged in as a {user.role}.\")\n",
        "        return user\n",
        "    else:\n",
        "        print(\"Invalid username or password.\")\n",
        "        return None\n",
        "\n",
        "# Function to send a message\n",
        "def send_message(sender):\n",
        "    receiver_username = input(\"Enter the username of the receiver: \")\n",
        "    receiver = session.query(User).filter_by(username=receiver_username).first()\n",
        "\n",
        "    if not receiver:\n",
        "        print(\"Receiver not found.\")\n",
        "        return\n",
        "\n",
        "    if sender.role == 'patient' and receiver.role != 'doctor':\n",
        "        print(\"Patients can only send messages to doctors.\")\n",
        "        return\n",
        "\n",
        "    content = input(\"Enter your message: \")\n",
        "    message = Message(sender_id=sender.id, receiver_id=receiver.id, content=content)\n",
        "    session.add(message)\n",
        "    session.commit()\n",
        "    print(\"Message sent successfully!\")\n",
        "\n",
        "# Function to view messages\n",
        "def view_messages(user):\n",
        "    received_messages = session.query(Message).filter_by(receiver_id=user.id).all()\n",
        "    print(f\"Messages for {user.username}:\")\n",
        "    for msg in received_messages:\n",
        "        sender = session.query(User).filter_by(id=msg.sender_id).first()\n",
        "        print(f\"From {sender.username}: {msg.content}\")\n",
        "\n",
        "# Function to record a note (doctor-only)\n",
        "def record_note(doctor):\n",
        "    if doctor.role != 'doctor':\n",
        "        print(\"Only doctors can record notes.\")\n",
        "        return\n",
        "\n",
        "    patient_username = input(\"Enter the username of the patient: \")\n",
        "    patient = session.query(User).filter_by(username=patient_username, role='patient').first()\n",
        "\n",
        "    if not patient:\n",
        "        print(\"Patient not found.\")\n",
        "        return\n",
        "\n",
        "    content = input(\"Enter note content: \")\n",
        "    note = Note(doctor_id=doctor.id, patient_id=patient.id, content=content)\n",
        "    session.add(note)\n",
        "    session.commit()\n",
        "    print(\"Note recorded successfully!\")\n",
        "\n",
        "# Step 2: Create initial admin account if necessary\n",
        "if not session.query(User).filter_by(role='admin').first():\n",
        "    session.add(User(username='admin', password='admin_password', role='admin'))\n",
        "    session.commit()\n",
        "    print(\"Initial admin account created (for first-time setup only).\")\n",
        "\n",
        "# Main loop\n",
        "while True:\n",
        "    print(\"\\n1. Create User (Admin only)\")\n",
        "    print(\"2. Login\")\n",
        "    print(\"3. Exit\")\n",
        "    choice = input(\"Choose an option: \")\n",
        "\n",
        "    if choice == '1':\n",
        "        print(\"Admin authentication required to create users.\")\n",
        "        admin_username = input(\"Enter admin username: \")\n",
        "        admin_password = getpass(\"Enter admin password: \")\n",
        "        new_username = input(\"Enter new user's username: \")\n",
        "        new_password = getpass(\"Enter new user's password: \")\n",
        "        new_role = input(\"Enter new user's role (patient/doctor): \").lower()\n",
        "        create_user(admin_username, admin_password, new_username, new_password, new_role)\n",
        "    elif choice == '2':\n",
        "        user = authenticate_user()\n",
        "        if user:\n",
        "            while True:\n",
        "                print(\"\\n1. Send Message\")\n",
        "                print(\"2. View Messages\")\n",
        "                if user.role == 'doctor':\n",
        "                    print(\"3. Record Note\")\n",
        "                print(\"4. Logout\")\n",
        "                user_choice = input(\"Choose an option: \")\n",
        "\n",
        "                if user_choice == '1':\n",
        "                    send_message(user)\n",
        "                elif user_choice == '2':\n",
        "                    view_messages(user)\n",
        "                elif user_choice == '3' and user.role == 'doctor':\n",
        "                    record_note(user)\n",
        "                elif user_choice == '4':\n",
        "                    break\n",
        "                else:\n",
        "                    print(\"Invalid option.\")\n",
        "    elif choice == '3':\n",
        "        break\n",
        "    else:\n",
        "        print(\"Invalid option.\")\n",
        "\n"
      ]
    }
  ]
}